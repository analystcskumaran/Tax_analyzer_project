name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      DJANGO_SETTINGS_MODULE: taxanalyzer.settings
      PYTHONUNBUFFERED: 1

    steps:
      # 1Ô∏è‚É£ Checkout the repo
      - name: Checkout code
        uses: actions/checkout@v3

      # 2Ô∏è‚É£ Set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      # 3Ô∏è‚É£ Install project dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt  # Use root requirements.txt

      # 4Ô∏è‚É£ Ensure folders exist
      - name: Prepare folders
        run: |
          mkdir -p data/raw
          mkdir -p data/processed
          mkdir -p models

      # 5Ô∏è‚É£ Preprocess dataset
      - name: Preprocess dataset
        run: python scripts/data_pipeline.py

      # 6Ô∏è‚É£ Verify processed pickle exists
      - name: Verify processed data
        run: |
          if [ ! -s data/processed/cleaned_tax_data.pkl ]; then
              echo "ERROR: Pickle file missing or empty!"
              exit 1
          else
              echo "Pickle file exists."
          fi

      # 7Ô∏è‚É£ Train ML model
      - name: Train ML model
        run: python models/train_model.py

      # 8Ô∏è‚É£ Verify trained model
      - name: Verify trained model
        run: |
          if [ ! -s models/model.pkl ]; then
              echo "ERROR: Trained ML model is missing!"
              exit 1
          else
              echo "Trained ML model exists."
          fi

      # 9Ô∏è‚É£ Start Flask API in background
      - name: Start Flask API
        run: |
          cd backend/flask_api
          nohup python app.py &

      # üîü Run Django tests (ensure correct working directory)
      - name: Run Django tests
        working-directory: backend/django_app
        run: python manage.py test

      # 1Ô∏è‚É£1Ô∏è‚É£ Run pytest tests
      - name: Run all pytest tests
        run: pytest tests

      # 1Ô∏è‚É£2Ô∏è‚É£ Optional: Test Streamlit app (check if it starts)
      - name: Test Streamlit
        run: |
          cd frontend/streamlit_app
          nohup streamlit run app.py & sleep 10
          pkill -f streamlit

      # 1Ô∏è‚É£3Ô∏è‚É£ Deploy to Heroku (only on main branch)
      - name: Deploy to Heroku
        if: github.ref == 'refs/heads/main'
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: |
          echo $HEROKU_API_KEY | heroku auth:token
          heroku create tax-analyzer-app || echo "App already exists"
          git push heroku main