name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      DJANGO_SETTINGS_MODULE: backend.django_app.taxanalyzer.settings  # Corrected import path
      PYTHONPATH: ${{ github.workspace }}  # Add project root to Python path
      PYTHONUNBUFFERED: 1

    steps:
      # 1Ô∏è‚É£ Checkout repo
      - name: Checkout code
        uses: actions/checkout@v3

      # 2Ô∏è‚É£ Set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      # 3Ô∏è‚É£ Install dependencies
      - name: Install dependencies
        run: pip install -r requirements.txt

      # 4Ô∏è‚É£ Ensure folders exist
      - name: Prepare folders
        run: |
          mkdir -p data/raw data/processed models

      # 5Ô∏è‚É£ Preprocess dataset
      - name: Preprocess dataset
        run: python scripts/data_pipeline.py

      # 6Ô∏è‚É£ Verify processed pickle exists
      - name: Verify processed data
        run: |
          if [ ! -s data/processed/cleaned_tax_data.pkl ]; then
              echo "‚ùå ERROR: Pickle file missing or empty!"
              exit 1
          else
              echo "‚úÖ Pickle file exists."
          fi

      # 7Ô∏è‚É£ Train ML model
      - name: Train ML model
        run: python models/train_model.py

      # 8Ô∏è‚É£ Verify trained model
      - name: Verify trained model
        run: |
          if [ ! -s models/model.pkl ]; then
              echo "‚ùå ERROR: Trained ML model is missing!"
              exit 1
          else
              echo "‚úÖ Trained ML model exists."
          fi

      # 9Ô∏è‚É£ Start Flask API in background (before tests)
      - name: Start Flask API
        run: |
          cd backend/flask_api
          nohup python app.py > flask.log 2>&1 &
          echo "üöÄ Flask API started in background."
        shell: bash

      # üîü Wait for Flask to start (to avoid 500 error)
      - name: Wait for Flask to initialize
        run: |
          echo "‚è≥ Waiting for Flask server..."
          sleep 10
          curl -v http://localhost:5000 || true  # Debugging step

      # 1Ô∏è‚É£1Ô∏è‚É£ Run Django tests
      - name: Run Django tests
        working-directory: backend/django_app
        run: python manage.py test

      # 1Ô∏è‚É£2Ô∏è‚É£ Run pytest tests (Flask + ML)
      - name: Run all pytest tests
        run: pytest tests -v

      # 1Ô∏è‚É£3Ô∏è‚É£ (Optional) Test Streamlit app
      - name: Test Streamlit startup
        run: |
          cd frontend/streamlit_app
          nohup streamlit run app.py > streamlit.log 2>&1 &
          sleep 10
          pkill -f streamlit || true

      # 1Ô∏è‚É£4Ô∏è‚É£ Deploy to Heroku
      - name: Deploy to Heroku
        if: github.ref == 'refs/heads/main'
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: |
          echo $HEROKU_API_KEY | heroku auth:token
          heroku create tax-analyzer-app || echo "App already exists"
          git push heroku main
